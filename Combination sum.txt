class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> current;
        backtrack(candidates, target, 0, 0, current, result);
        return result;
    }
    
private:
    void backtrack(const vector<int>& candidates, int target, int index, int sum, vector<int>& current, vector<vector<int>>& result) {
        if (sum == target) {
            result.push_back(current);
            return;
        }
        
        if (sum > target || index == candidates.size()) {
            return;
        }
        
        // Include the current element
        current.push_back(candidates[index]);
        backtrack(candidates, target, index, sum + candidates[index], current, result);
        current.pop_back(); // Backtrack
        
        // Exclude the current element
        backtrack(candidates, target, index + 1, sum, current, result);
    }
};
